'use client';

import React, { useState, useEffect } from 'react';
import { withAuth, useAuth } from '@/contexts/AuthContext';
import { TokenManager } from '@/lib/api-client';
import AdminLayout from '@/components/ui/AdminLayout';
import StatsCard from '@/components/ui/StatsCard';
import Modal, { ModalActions, ConfirmModal } from '@/components/ui/Modal';
import {
  DollarSign,
  Edit,
  Save,
  Plus,
  AlertTriangle,
  History,
  Settings,
  Building2,
  Calculator,
  FileText,
  Trash2,
  Loader2
} from 'lucide-react';

interface GovernmentPricing {
  id: string;
  equipment_type: string;
  equipment_name: string;
  official_price: number;
  manufacturer_price: number;
  installation_cost: number;
  effective_from: string;
  effective_to?: string;
  announcement_number?: string;
  is_active: boolean;
}

interface SalesOfficeSetting {
  id: string;
  sales_office: string;
  commission_type: 'percentage' | 'per_unit';
  commission_percentage?: number;
  commission_per_unit?: number;
  effective_from: string;
  is_active: boolean;
}

interface SurveyCost {
  id: string;
  survey_type: 'estimate' | 'pre_construction' | 'completion';
  survey_name: string;
  base_cost: number;
  effective_from: string;
  is_active: boolean;
}

interface ManufacturerPricing {
  id: string;
  equipment_type: string;
  equipment_name: string;
  manufacturer: 'ecosense' | 'cleanearth' | 'gaia_cns' | 'evs';
  cost_price: number;
  effective_from: string;
  effective_to?: string;
  notes?: string;
  is_active: boolean;
}

interface InstallationCost {
  id: string;
  equipment_type: string;
  equipment_name: string;
  base_installation_cost: number;
  effective_from: string;
  effective_to?: string;
  notes?: string;
  is_active: boolean;
}

interface DealerPricing {
  id: string;
  equipment_type: string;
  equipment_name: string;
  dealer_cost_price: number;
  dealer_selling_price: number;
  margin_rate: number;
  manufacturer?: string;
  effective_from: string;
  effective_to?: string;
  notes?: string;
  is_active: boolean;
}

function PricingManagement() {
  const [activeTab, setActiveTab] = useState('government');
  const [governmentPricing, setGovernmentPricing] = useState<GovernmentPricing[]>([]);
  const [salesOfficeSettings, setSalesOfficeSettings] = useState<SalesOfficeSetting[]>([]);
  const [surveyCosts, setSurveyCosts] = useState<SurveyCost[]>([]);
  const [manufacturerPricing, setManufacturerPricing] = useState<ManufacturerPricing[]>([]);
  const [installationCosts, setInstallationCosts] = useState<InstallationCost[]>([]);
  const [dealerPricing, setDealerPricing] = useState<DealerPricing[]>([]);
  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);

  // Ìé∏Ïßë Í¥ÄÎ†® ÏÉÅÌÉú
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [editingItem, setEditingItem] = useState<any>(null);
  const [editType, setEditType] = useState<'government' | 'sales' | 'survey' | 'manufacturer' | 'installation' | 'dealer'>('government');
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [deleteItem, setDeleteItem] = useState<any>(null);

  // AuthContextÏóêÏÑú Í∂åÌïú Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
  const { user, permissions } = useAuth();
  const userPermission = user?.permission_level || 0;

  useEffect(() => {
    loadAllData();
  }, []);

  const getAuthHeaders = () => {
    const token = TokenManager.getToken();
    return {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json'
    };
  };

  const loadAllData = async () => {
    setLoading(true);
    try {
      await Promise.all([
        loadGovernmentPricing(),
        loadSalesOfficeSettings(),
        loadSurveyCosts(),
        loadManufacturerPricing(),
        loadInstallationCosts(),
        loadDealerPricing()
      ]);
    } catch (error) {
      console.error('Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïò§Î•ò:', error);
    } finally {
      setLoading(false);
    }
  };

  const loadGovernmentPricing = async () => {
    try {
      const response = await fetch('/api/revenue/government-pricing', {
        headers: getAuthHeaders()
      });
      const data = await response.json();
      if (data.success) {
        setGovernmentPricing(data.data.pricing || []);
      }
    } catch (error) {
      console.error('Ï†ïÎ∂Ä Í≥†ÏãúÍ∞Ä Î°úÎìú Ïò§Î•ò:', error);
    }
  };

  const loadSalesOfficeSettings = async () => {
    try {
      const response = await fetch('/api/revenue/sales-office-settings', {
        headers: getAuthHeaders()
      });
      const data = await response.json();
      if (data.success) {
        setSalesOfficeSettings(data.data.settings || []);
      }
    } catch (error) {
      console.error('ÏòÅÏóÖÏ†ê ÏÑ§Ï†ï Î°úÎìú Ïò§Î•ò:', error);
    }
  };

  const loadSurveyCosts = async () => {
    try {
      const response = await fetch('/api/revenue/survey-costs', {
        headers: getAuthHeaders()
      });
      const data = await response.json();
      if (data.success) {
        setSurveyCosts(data.data || []);
      } else {
        console.error('Ïã§ÏÇ¨ÎπÑÏö© Î°úÎìú Ïã§Ìå®:', data.message);
        // Ïã§Ìå® Ïãú Í∏∞Î≥∏ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©
        setSurveyCosts([
          {
            id: '1',
            survey_type: 'estimate',
            survey_name: 'Í≤¨Ï†ÅÏã§ÏÇ¨',
            base_cost: 100000,
            effective_from: '2025-01-01',
            is_active: true
          },
          {
            id: '2',
            survey_type: 'pre_construction',
            survey_name: 'Ï∞©Í≥µÏ†ÑÏã§ÏÇ¨',
            base_cost: 150000,
            effective_from: '2025-01-01',
            is_active: true
          },
          {
            id: '3',
            survey_type: 'completion',
            survey_name: 'Ï§ÄÍ≥µÏã§ÏÇ¨',
            base_cost: 200000,
            effective_from: '2025-01-01',
            is_active: true
          }
        ]);
      }
    } catch (error) {
      console.error('Ïã§ÏÇ¨ÎπÑÏö© Î°úÎìú Ïò§Î•ò:', error);
      // Ïò§Î•ò Ïãú Í∏∞Î≥∏ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©
      setSurveyCosts([
        {
          id: '1',
          survey_type: 'estimate',
          survey_name: 'Í≤¨Ï†ÅÏã§ÏÇ¨',
          base_cost: 100000,
          effective_from: '2025-01-01',
          is_active: true
        },
        {
          id: '2',
          survey_type: 'pre_construction',
          survey_name: 'Ï∞©Í≥µÏ†ÑÏã§ÏÇ¨',
          base_cost: 150000,
          effective_from: '2025-01-01',
          is_active: true
        },
        {
          id: '3',
          survey_type: 'completion',
          survey_name: 'Ï§ÄÍ≥µÏã§ÏÇ¨',
          base_cost: 200000,
          effective_from: '2025-01-01',
          is_active: true
        }
      ]);
    }
  };

  const loadManufacturerPricing = async () => {
    try {
      const response = await fetch('/api/revenue/manufacturer-pricing', {
        headers: getAuthHeaders()
      });
      const data = await response.json();
      if (data.success) {
        setManufacturerPricing(data.data.pricing || []);
      }
    } catch (error) {
      console.error('Ï†úÏ°∞ÏÇ¨Î≥Ñ ÏõêÍ∞Ä Î°úÎìú Ïò§Î•ò:', error);
    }
  };

  const loadInstallationCosts = async () => {
    try {
      const response = await fetch('/api/revenue/installation-cost', {
        headers: getAuthHeaders()
      });
      const data = await response.json();
      if (data.success) {
        setInstallationCosts(data.data.costs || []);
      }
    } catch (error) {
      console.error('Í∏∞Î≥∏ ÏÑ§ÏπòÎπÑ Î°úÎìú Ïò§Î•ò:', error);
    }
  };

  const loadDealerPricing = async () => {
    try {
      const response = await fetch('/api/revenue/dealer-pricing', {
        headers: getAuthHeaders()
      });
      const data = await response.json();
      if (data.success) {
        setDealerPricing(data.data || []);
      }
    } catch (error) {
      console.error('ÎåÄÎ¶¨Ï†ê Í∞ÄÍ≤© Î°úÎìú Ïò§Î•ò:', error);
    }
  };

  const handleEdit = (item: any, type: 'government' | 'sales' | 'survey' | 'manufacturer' | 'installation' | 'dealer') => {
    setEditingItem(item);
    setEditType(type);
    setIsEditModalOpen(true);
  };

  const handleSave = async (formData: any) => {
    setSaving(true);
    try {
      let endpoint = '';
      let method = 'POST';
      const isEditMode = !!editingItem;

      switch (editType) {
        case 'government':
          endpoint = '/api/revenue/government-pricing';
          break;
        case 'sales':
          endpoint = '/api/revenue/sales-office-settings';
          break;
        case 'survey':
          endpoint = '/api/revenue/survey-costs';
          method = isEditMode ? 'PATCH' : 'POST';
          break;
        case 'manufacturer':
          endpoint = '/api/revenue/manufacturer-pricing';
          method = isEditMode ? 'PATCH' : 'POST';
          break;
        case 'installation':
          endpoint = '/api/revenue/installation-cost';
          method = isEditMode ? 'PATCH' : 'POST';
          break;
        case 'dealer':
          endpoint = '/api/revenue/dealer-pricing';
          method = isEditMode ? 'PUT' : 'POST';
          break;
      }

      const response = await fetch(endpoint, {
        method,
        headers: getAuthHeaders(),
        body: JSON.stringify(formData)
      });

      const data = await response.json();
      if (data.success) {
        alert('Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.');
        setIsEditModalOpen(false);
        setEditingItem(null);
        loadAllData();
      } else {
        alert('Ï†ÄÏû• Ïã§Ìå®: ' + data.message);
      }
    } catch (error) {
      console.error('Ï†ÄÏû• Ïò§Î•ò:', error);
      alert('Ï†ÄÏû• Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    } finally {
      setSaving(false);
    }
  };

  const handleDelete = async () => {
    if (!deleteItem) {
      console.log('‚ö†Ô∏è deleteItemÏù¥ ÏóÜÏäµÎãàÎã§');
      return;
    }

    console.log('üóëÔ∏è ÏÇ≠Ï†ú ÏãúÏûë:', { id: deleteItem.id, type: editType, name: deleteItem.equipment_name });

    try {
      let endpoint = '';

      switch (editType) {
        case 'government':
          endpoint = `/api/revenue/government-pricing?id=${deleteItem.id}`;
          break;
        case 'sales':
          endpoint = `/api/revenue/sales-office-settings?id=${deleteItem.id}`;
          break;
        case 'survey':
          endpoint = `/api/revenue/survey-costs?id=${deleteItem.id}`;
          break;
        case 'manufacturer':
          endpoint = `/api/revenue/manufacturer-pricing?id=${deleteItem.id}`;
          break;
        case 'installation':
          endpoint = `/api/revenue/installation-cost?id=${deleteItem.id}`;
          break;
        case 'dealer':
          endpoint = `/api/revenue/dealer-pricing?id=${deleteItem.id}`;
          break;
      }

      console.log('üåê DELETE ÏöîÏ≤≠:', endpoint);

      const response = await fetch(endpoint, {
        method: 'DELETE',
        headers: getAuthHeaders()
      });

      console.log('üì° ÏùëÎãµ ÏÉÅÌÉú:', response.status);

      const data = await response.json();
      console.log('üì¶ ÏùëÎãµ Îç∞Ïù¥ÌÑ∞:', data);

      if (data.success) {
        alert('ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.');
        setIsDeleteModalOpen(false);
        setDeleteItem(null);
        console.log('üîÑ Îç∞Ïù¥ÌÑ∞ Ïû¨Î°úÎìú ÏãúÏûë...');
        await loadAllData();
        console.log('‚úÖ Îç∞Ïù¥ÌÑ∞ Ïû¨Î°úÎìú ÏôÑÎ£å');
      } else {
        alert('ÏÇ≠Ï†ú Ïã§Ìå®: ' + data.message);
        console.error('‚ùå ÏÇ≠Ï†ú Ïã§Ìå®:', data.message);
      }
    } catch (error) {
      console.error('‚ùå ÏÇ≠Ï†ú Ïò§Î•ò:', error);
      alert('ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  };

  const openDeleteModal = (item: any, type: 'government' | 'sales' | 'survey' | 'manufacturer' | 'installation' | 'dealer') => {
    setDeleteItem(item);
    setEditType(type);
    setIsDeleteModalOpen(true);
  };

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('ko-KR', {
      style: 'currency',
      currency: 'KRW'
    }).format(amount);
  };

  const tabs = [
    { id: 'government', label: 'ÌôòÍ≤ΩÎ∂Ä Í≥†ÏãúÍ∞Ä', icon: FileText },
    { id: 'manufacturer', label: 'Ï†úÏ°∞ÏÇ¨Î≥Ñ ÏõêÍ∞Ä', icon: Settings },
    { id: 'installation', label: 'Í∏∞Î≥∏ ÏÑ§ÏπòÎπÑ', icon: DollarSign },
    { id: 'dealer', label: 'ÎåÄÎ¶¨Ï†ê Í∞ÄÍ≤©', icon: Building2 },
    { id: 'sales', label: 'ÏòÅÏóÖÏ†ê ÏÑ§Ï†ï', icon: Building2 },
    { id: 'survey', label: 'Ïã§ÏÇ¨ÎπÑÏö©', icon: Calculator }
  ];

  return (
    <AdminLayout
      title="ÏõêÍ∞Ä Í¥ÄÎ¶¨"
      description="ÌôòÍ≤ΩÎ∂Ä Í≥†ÏãúÍ∞Ä, Ï†úÏ°∞ÏÇ¨Î≥Ñ ÏõêÍ∞Ä, ÎåÄÎ¶¨Ï†ê Í∞ÄÍ≤©, ÏòÅÏóÖÏ†ê ÏÑ§Ï†ï, Ïã§ÏÇ¨ÎπÑÏö© Í¥ÄÎ¶¨"
      actions={
        <button
          onClick={() => window.location.href = '/admin/revenue'}
          className="px-4 py-2 bg-white border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 flex items-center gap-2 transition-colors"
        >
          <DollarSign className="w-4 h-4" />
          Îß§Ï∂ú ÎåÄÏãúÎ≥¥Îìú
        </button>
      }
    >
      <div className="space-y-6">

        {/* ÌÜµÍ≥Ñ Ïπ¥Îìú */}
        <div className="grid grid-cols-2 sm:grid-cols-2 md:grid-cols-4 gap-3 sm:gap-4 md:gap-6">
          <StatsCard
            title="ÌôúÏÑ± Í∏∞Í∏∞ Ï¢ÖÎ•ò"
            value={`${governmentPricing.filter(p => p.is_active).length}Í∞ú`}
            icon={FileText}
            color="blue"
            description="ÌôòÍ≤ΩÎ∂Ä Í≥†ÏãúÍ∞Ä Îì±Î°ù Í∏∞Í∏∞"
          />
          <StatsCard
            title="Ï†úÏ°∞ÏÇ¨Î≥Ñ ÏõêÍ∞Ä"
            value={`${manufacturerPricing.filter(p => p.is_active).length}Í∞ú`}
            icon={Settings}
            color="orange"
            description="Ï†úÏ°∞ÏÇ¨Î≥Ñ Í∏∞Í∏∞ ÏõêÍ∞Ä"
          />
          <StatsCard
            title="ÎåÄÎ¶¨Ï†ê Í∞ÄÍ≤©"
            value={`${dealerPricing.filter(p => p.is_active).length}Í∞ú`}
            icon={Building2}
            color="green"
            description="ÎåÄÎ¶¨Ï†ê ÌåêÎß§ Í∞ÄÍ≤©"
          />
          <StatsCard
            title="ÏòÅÏóÖÏ†ê Ïàò"
            value={`${salesOfficeSettings.length}Í∞ú`}
            icon={Building2}
            color="purple"
            description="Îì±Î°ùÎêú ÏòÅÏóÖÏ†ê"
          />
        </div>

        {/* ÌÉ≠ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò */}
        <div className="bg-white rounded-lg sm:rounded-xl shadow-sm border border-gray-200">
          <div className="border-b border-gray-200 bg-gray-50 rounded-t-lg sm:rounded-t-xl overflow-x-auto">
            <nav className="flex space-x-4 sm:space-x-8 px-3 sm:px-6 min-w-max">
              {tabs.map(tab => {
                const IconComponent = tab.icon;
                return (
                  <button
                    key={tab.id}
                    onClick={() => setActiveTab(tab.id)}
                    className={`flex items-center gap-2 py-3 sm:py-4 px-2 sm:px-0 border-b-2 transition-all duration-200 text-xs sm:text-sm font-medium whitespace-nowrap ${
                      activeTab === tab.id
                        ? 'border-blue-500 text-blue-600'
                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                    }`}
                  >
                    <IconComponent className="w-4 h-4" />
                    <span>{tab.label}</span>
                  </button>
                );
              })}
            </nav>
          </div>

          <div className="p-3 sm:p-4 md:p-6">
            {loading ? (
              <div className="flex items-center justify-center py-12">
                <Loader2 className="w-6 h-6 animate-spin mr-2 text-blue-600" />
                <span className="text-gray-600">Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...</span>
              </div>
            ) : (
              <>
                {/* ÌôòÍ≤ΩÎ∂Ä Í≥†ÏãúÍ∞Ä ÌÉ≠ */}
                {activeTab === 'government' && (
                  <div className="space-y-4">
                    <div className="flex justify-between items-center">
                      <h3 className="text-lg font-semibold">ÌôòÍ≤ΩÎ∂Ä Í≥†ÏãúÍ∞Ä Í¥ÄÎ¶¨</h3>
                      <button
                        onClick={() => handleEdit(null, 'government')}
                        className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center gap-2 transition-colors"
                      >
                        <Plus className="w-4 h-4" />
                        ÏÉà Í∞ÄÍ≤© Ï∂îÍ∞Ä
                      </button>
                    </div>

                    <div className="overflow-x-auto">
                      <table className="w-full border-collapse border border-gray-300">
                        <thead>
                          <tr className="bg-gray-50">
                            <th className="border border-gray-300 px-4 py-2 text-left">Í∏∞Í∏∞Î™Ö</th>
                            <th className="border border-gray-300 px-4 py-2 text-right">ÌôòÍ≤ΩÎ∂Ä Í≥†ÏãúÍ∞Ä</th>
                            <th className="border border-gray-300 px-4 py-2 text-right">Ï†úÏ°∞ÏÇ¨ ÏõêÍ∞Ä</th>
                            <th className="border border-gray-300 px-4 py-2 text-right">ÏÑ§ÏπòÎπÑÏö©</th>
                            <th className="border border-gray-300 px-4 py-2 text-center">ÏãúÌñâÏùº</th>
                            <th className="border border-gray-300 px-4 py-2 text-center">ÏÉÅÌÉú</th>
                            <th className="border border-gray-300 px-4 py-2 text-center">ÏûëÏóÖ</th>
                          </tr>
                        </thead>
                        <tbody>
                          {governmentPricing.map(pricing => (
                            <tr key={pricing.id} className="hover:bg-gray-50">
                              <td className="border border-gray-300 px-4 py-2">{pricing.equipment_name}</td>
                              <td className="border border-gray-300 px-4 py-2 text-right font-mono">
                                {formatCurrency(pricing.official_price)}
                              </td>
                              <td className="border border-gray-300 px-4 py-2 text-right font-mono">
                                {formatCurrency(pricing.manufacturer_price)}
                              </td>
                              <td className="border border-gray-300 px-4 py-2 text-right font-mono">
                                {formatCurrency(pricing.installation_cost)}
                              </td>
                              <td className="border border-gray-300 px-4 py-2 text-center">
                                {pricing.effective_from}
                              </td>
                              <td className="border border-gray-300 px-4 py-2 text-center">
                                <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                  pricing.is_active ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
                                }`}>
                                  {pricing.is_active ? 'ÌôúÏÑ±' : 'ÎπÑÌôúÏÑ±'}
                                </span>
                              </td>
                              <td className="border border-gray-300 px-4 py-2 text-center">
                                <button
                                  onClick={() => handleEdit(pricing, 'government')}
                                  className="p-1 text-blue-600 hover:text-blue-800 transition-colors"
                                >
                                  <Edit className="w-4 h-4" />
                                </button>
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  </div>
                )}

                {/* ÏòÅÏóÖÏ†ê ÏÑ§Ï†ï ÌÉ≠ */}
                {activeTab === 'sales' && (
                  <div className="space-y-4">
                    <div className="flex justify-between items-center">
                      <h3 className="text-lg font-semibold">ÏòÅÏóÖÏ†ê ÏàòÏàòÎ£å ÏÑ§Ï†ï</h3>
                      <button
                        onClick={() => handleEdit(null, 'sales')}
                        className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center gap-2 transition-colors"
                      >
                        <Plus className="w-4 h-4" />
                        ÏÉà ÏÑ§Ï†ï Ï∂îÍ∞Ä
                      </button>
                    </div>

                    <div className="overflow-x-auto">
                      <table className="w-full border-collapse border border-gray-300">
                        <thead>
                          <tr className="bg-gray-50">
                            <th className="border border-gray-300 px-4 py-2 text-left">ÏòÅÏóÖÏ†ê</th>
                            <th className="border border-gray-300 px-4 py-2 text-center">ÏàòÏàòÎ£å Î∞©Ïãù</th>
                            <th className="border border-gray-300 px-4 py-2 text-right">ÏàòÏàòÎ£åÏú®</th>
                            <th className="border border-gray-300 px-4 py-2 text-center">ÏãúÌñâÏùº</th>
                            <th className="border border-gray-300 px-4 py-2 text-center">ÏÉÅÌÉú</th>
                            <th className="border border-gray-300 px-4 py-2 text-center">ÏûëÏóÖ</th>
                          </tr>
                        </thead>
                        <tbody>
                          {salesOfficeSettings.map(setting => (
                            <tr key={setting.id} className="hover:bg-gray-50">
                              <td className="border border-gray-300 px-4 py-2 font-medium">{setting.sales_office}</td>
                              <td className="border border-gray-300 px-4 py-2 text-center">
                                <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                  setting.commission_type === 'percentage' ? 'bg-blue-100 text-blue-800' : 'bg-purple-100 text-purple-800'
                                }`}>
                                  {setting.commission_type === 'percentage' ? 'Îß§Ï∂ú ÎπÑÏú®' : 'Í∏∞Í∏∞Îãπ Îã®Í∞Ä'}
                                </span>
                              </td>
                              <td className="border border-gray-300 px-4 py-2 text-right font-mono">
                                {setting.commission_type === 'percentage'
                                  ? `${setting.commission_percentage}%`
                                  : formatCurrency(setting.commission_per_unit || 0)
                                }
                              </td>
                              <td className="border border-gray-300 px-4 py-2 text-center">
                                {setting.effective_from}
                              </td>
                              <td className="border border-gray-300 px-4 py-2 text-center">
                                <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                  setting.is_active ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
                                }`}>
                                  {setting.is_active ? 'ÌôúÏÑ±' : 'ÎπÑÌôúÏÑ±'}
                                </span>
                              </td>
                              <td className="border border-gray-300 px-4 py-2 text-center">
                                <button
                                  onClick={() => handleEdit(setting, 'sales')}
                                  className="p-1 text-blue-600 hover:text-blue-800 transition-colors"
                                >
                                  <Edit className="w-4 h-4" />
                                </button>
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  </div>
                )}

                {/* Ïã§ÏÇ¨ÎπÑÏö© ÌÉ≠ */}
                {activeTab === 'survey' && (
                  <div className="space-y-4">
                    <div className="flex justify-between items-center">
                      <h3 className="text-lg font-semibold">Ïã§ÏÇ¨ÎπÑÏö© Í¥ÄÎ¶¨</h3>
                      <button
                        onClick={() => handleEdit(null, 'survey')}
                        className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center gap-2 transition-colors"
                      >
                        <Plus className="w-4 h-4" />
                        ÏÉà ÎπÑÏö© Ï∂îÍ∞Ä
                      </button>
                    </div>

                    <div className="overflow-x-auto">
                      <table className="w-full border-collapse border border-gray-300">
                        <thead>
                          <tr className="bg-gray-50">
                            <th className="border border-gray-300 px-4 py-2 text-left">Ïã§ÏÇ¨ Ïú†Ìòï</th>
                            <th className="border border-gray-300 px-4 py-2 text-left">Ïã§ÏÇ¨Î™Ö</th>
                            <th className="border border-gray-300 px-4 py-2 text-right">Í∏∞Î≥∏ ÎπÑÏö©</th>
                            <th className="border border-gray-300 px-4 py-2 text-center">ÏãúÌñâÏùº</th>
                            <th className="border border-gray-300 px-4 py-2 text-center">ÏÉÅÌÉú</th>
                            <th className="border border-gray-300 px-4 py-2 text-center">ÏûëÏóÖ</th>
                          </tr>
                        </thead>
                        <tbody>
                          {surveyCosts.map(cost => (
                            <tr key={cost.id} className="hover:bg-gray-50">
                              <td className="border border-gray-300 px-4 py-2">
                                <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                  cost.survey_type === 'estimate' ? 'bg-yellow-100 text-yellow-800' :
                                  cost.survey_type === 'pre_construction' ? 'bg-blue-100 text-blue-800' :
                                  'bg-green-100 text-green-800'
                                }`}>
                                  {cost.survey_type}
                                </span>
                              </td>
                              <td className="border border-gray-300 px-4 py-2 font-medium">{cost.survey_name}</td>
                              <td className="border border-gray-300 px-4 py-2 text-right font-mono">
                                {formatCurrency(cost.base_cost)}
                              </td>
                              <td className="border border-gray-300 px-4 py-2 text-center">
                                {cost.effective_from}
                              </td>
                              <td className="border border-gray-300 px-4 py-2 text-center">
                                <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                  cost.is_active ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
                                }`}>
                                  {cost.is_active ? 'ÌôúÏÑ±' : 'ÎπÑÌôúÏÑ±'}
                                </span>
                              </td>
                              <td className="border border-gray-300 px-4 py-2 text-center">
                                <button
                                  onClick={() => handleEdit(cost, 'survey')}
                                  className="p-1 text-blue-600 hover:text-blue-800 transition-colors"
                                >
                                  <Edit className="w-4 h-4" />
                                </button>
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  </div>
                )}

                {/* Ï†úÏ°∞ÏÇ¨Î≥Ñ ÏõêÍ∞Ä ÌÉ≠ */}
                {activeTab === 'manufacturer' && (
                  <div className="space-y-4">
                    <div className="flex justify-between items-center">
                      <h3 className="text-lg font-semibold">Ï†úÏ°∞ÏÇ¨Î≥Ñ ÏõêÍ∞Ä Í¥ÄÎ¶¨</h3>
                      <button
                        onClick={() => handleEdit(null, 'manufacturer')}
                        className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center gap-2 transition-colors"
                      >
                        <Plus className="w-4 h-4" />
                        ÏÉà Ï†úÏ°∞ÏÇ¨ ÏõêÍ∞Ä Ï∂îÍ∞Ä
                      </button>
                    </div>

                    <div className="overflow-x-auto">
                      <table className="w-full border-collapse border border-gray-300">
                        <thead>
                          <tr className="bg-gray-50">
                            <th className="border border-gray-300 px-4 py-2 text-left">Í∏∞Í∏∞Î™Ö</th>
                            <th className="border border-gray-300 px-4 py-2 text-left">Ï†úÏ°∞ÏÇ¨</th>
                            <th className="border border-gray-300 px-4 py-2 text-right">ÏõêÍ∞Ä</th>
                            <th className="border border-gray-300 px-4 py-2 text-center">ÏãúÌñâÏùº</th>
                            <th className="border border-gray-300 px-4 py-2 text-center">Ï¢ÖÎ£åÏùº</th>
                            <th className="border border-gray-300 px-4 py-2 text-center">ÏÉÅÌÉú</th>
                            <th className="border border-gray-300 px-4 py-2 text-center">ÏûëÏóÖ</th>
                          </tr>
                        </thead>
                        <tbody>
                          {manufacturerPricing.map(pricing => (
                            <tr key={pricing.id} className="hover:bg-gray-50">
                              <td className="border border-gray-300 px-4 py-2 font-medium">{pricing.equipment_name}</td>
                              <td className="border border-gray-300 px-4 py-2">
                                <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                  pricing.manufacturer === 'ecosense' ? 'bg-blue-100 text-blue-800' :
                                  pricing.manufacturer === 'cleanearth' ? 'bg-green-100 text-green-800' :
                                  pricing.manufacturer === 'gaia_cns' ? 'bg-purple-100 text-purple-800' :
                                  pricing.manufacturer === 'evs' ? 'bg-orange-100 text-orange-800' :
                                  'bg-gray-100 text-gray-800'
                                }`}>
                                  {pricing.manufacturer === 'ecosense' ? 'ÏóêÏΩîÏÑºÏä§' :
                                   pricing.manufacturer === 'cleanearth' ? 'ÌÅ¨Î¶∞Ïñ¥Ïä§' :
                                   pricing.manufacturer === 'gaia_cns' ? 'Í∞ÄÏù¥ÏïÑÏî®Ïï§ÏóêÏä§' :
                                   pricing.manufacturer === 'evs' ? 'Ïù¥Î∏åÏù¥ÏóêÏä§' : pricing.manufacturer}
                                </span>
                              </td>
                              <td className="border border-gray-300 px-4 py-2 text-right font-mono">
                                ‚Ç©{pricing.cost_price.toLocaleString()}
                              </td>
                              <td className="border border-gray-300 px-4 py-2 text-center">
                                {pricing.effective_from}
                              </td>
                              <td className="border border-gray-300 px-4 py-2 text-center">
                                {pricing.effective_to || '-'}
                              </td>
                              <td className="border border-gray-300 px-4 py-2 text-center">
                                <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                  pricing.is_active ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
                                }`}>
                                  {pricing.is_active ? 'ÌôúÏÑ±' : 'ÎπÑÌôúÏÑ±'}
                                </span>
                              </td>
                              <td className="border border-gray-300 px-4 py-2 text-center">
                                <div className="flex items-center justify-center gap-2">
                                  <button
                                    onClick={() => handleEdit(pricing, 'manufacturer')}
                                    className="p-1 text-blue-600 hover:text-blue-800 transition-colors"
                                    title="ÏàòÏ†ï"
                                  >
                                    <Edit className="w-4 h-4" />
                                  </button>
                                  <button
                                    onClick={() => openDeleteModal(pricing, 'manufacturer')}
                                    className="p-1 text-red-600 hover:text-red-800 transition-colors"
                                    title="ÏÇ≠Ï†ú"
                                  >
                                    <Trash2 className="w-4 h-4" />
                                  </button>
                                </div>
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  </div>
                )}

                {/* Í∏∞Î≥∏ ÏÑ§ÏπòÎπÑ ÌÉ≠ */}
                {activeTab === 'installation' && (
                  <div className="space-y-4">
                    <div className="flex justify-between items-center">
                      <h3 className="text-lg font-semibold">Í∏∞Î≥∏ ÏÑ§ÏπòÎπÑ Í¥ÄÎ¶¨</h3>
                      <button
                        onClick={() => handleEdit(null, 'installation')}
                        className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center gap-2 transition-colors"
                      >
                        <Plus className="w-4 h-4" />
                        ÏÉà ÏÑ§ÏπòÎπÑ Ï∂îÍ∞Ä
                      </button>
                    </div>

                    <div className="overflow-x-auto">
                      <table className="w-full border-collapse border border-gray-300">
                        <thead>
                          <tr className="bg-gray-50">
                            <th className="border border-gray-300 px-4 py-2 text-left">Í∏∞Í∏∞Î™Ö</th>
                            <th className="border border-gray-300 px-4 py-2 text-right">Í∏∞Î≥∏ ÏÑ§ÏπòÎπÑ</th>
                            <th className="border border-gray-300 px-4 py-2 text-center">ÏãúÌñâÏùº</th>
                            <th className="border border-gray-300 px-4 py-2 text-center">Ï¢ÖÎ£åÏùº</th>
                            <th className="border border-gray-300 px-4 py-2 text-center">ÏÉÅÌÉú</th>
                            <th className="border border-gray-300 px-4 py-2 text-center">ÏûëÏóÖ</th>
                          </tr>
                        </thead>
                        <tbody>
                          {installationCosts.map(cost => (
                            <tr key={cost.id} className="hover:bg-gray-50">
                              <td className="border border-gray-300 px-4 py-2 font-medium">{cost.equipment_name}</td>
                              <td className="border border-gray-300 px-4 py-2 text-right font-mono">
                                ‚Ç©{cost.base_installation_cost.toLocaleString()}
                              </td>
                              <td className="border border-gray-300 px-4 py-2 text-center">
                                {cost.effective_from}
                              </td>
                              <td className="border border-gray-300 px-4 py-2 text-center">
                                {cost.effective_to || '-'}
                              </td>
                              <td className="border border-gray-300 px-4 py-2 text-center">
                                <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                  cost.is_active ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
                                }`}>
                                  {cost.is_active ? 'ÌôúÏÑ±' : 'ÎπÑÌôúÏÑ±'}
                                </span>
                              </td>
                              <td className="border border-gray-300 px-4 py-2 text-center">
                                <div className="flex items-center justify-center gap-2">
                                  <button
                                    onClick={() => handleEdit(cost, 'installation')}
                                    className="p-1 text-blue-600 hover:text-blue-800 transition-colors"
                                    title="ÏàòÏ†ï"
                                  >
                                    <Edit className="w-4 h-4" />
                                  </button>
                                  <button
                                    onClick={() => openDeleteModal(cost, 'installation')}
                                    className="p-1 text-red-600 hover:text-red-800 transition-colors"
                                    title="ÏÇ≠Ï†ú"
                                  >
                                    <Trash2 className="w-4 h-4" />
                                  </button>
                                </div>
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  </div>
                )}

                {/* ÎåÄÎ¶¨Ï†ê Í∞ÄÍ≤© ÌÉ≠ */}
                {activeTab === 'dealer' && (
                  <div className="space-y-4">
                    <div className="flex justify-between items-center">
                      <h3 className="text-lg font-semibold">ÎåÄÎ¶¨Ï†ê Í∞ÄÍ≤© Í¥ÄÎ¶¨</h3>
                      <button
                        onClick={() => handleEdit(null, 'dealer')}
                        className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center gap-2 transition-colors"
                      >
                        <Plus className="w-4 h-4" />
                        ÏÉà ÎåÄÎ¶¨Ï†ê Í∞ÄÍ≤© Ï∂îÍ∞Ä
                      </button>
                    </div>

                    <div className="overflow-x-auto">
                      <table className="w-full border-collapse border border-gray-300">
                        <thead>
                          <tr className="bg-gray-50">
                            <th className="border border-gray-300 px-4 py-2 text-left">Í∏∞Í∏∞Î™Ö</th>
                            <th className="border border-gray-300 px-4 py-2 text-left">Ï†úÏ°∞ÏÇ¨</th>
                            <th className="border border-gray-300 px-4 py-2 text-right">Í≥µÍ∏âÍ∞Ä</th>
                            <th className="border border-gray-300 px-4 py-2 text-right">ÌåêÎß§Í∞Ä</th>
                            <th className="border border-gray-300 px-4 py-2 text-center">ÎßàÏßÑÏú®</th>
                            <th className="border border-gray-300 px-4 py-2 text-center">ÏãúÌñâÏùº</th>
                            <th className="border border-gray-300 px-4 py-2 text-center">Ï¢ÖÎ£åÏùº</th>
                            <th className="border border-gray-300 px-4 py-2 text-center">ÏÉÅÌÉú</th>
                            <th className="border border-gray-300 px-4 py-2 text-center">ÏûëÏóÖ</th>
                          </tr>
                        </thead>
                        <tbody>
                          {dealerPricing.map(pricing => (
                            <tr key={pricing.id} className="hover:bg-gray-50">
                              <td className="border border-gray-300 px-4 py-2 font-medium">{pricing.equipment_name}</td>
                              <td className="border border-gray-300 px-4 py-2">
                                {pricing.manufacturer ? (
                                  <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                    pricing.manufacturer === 'ÏóêÏΩîÏÑºÏä§' ? 'bg-blue-100 text-blue-800' :
                                    pricing.manufacturer === 'ÌÅ¨Î¶∞Ïñ¥Ïä§' ? 'bg-green-100 text-green-800' :
                                    pricing.manufacturer === 'Í∞ÄÏù¥ÏïÑÏî®Ïï§ÏóêÏä§' ? 'bg-purple-100 text-purple-800' :
                                    pricing.manufacturer === 'Ïù¥Î∏åÏù¥ÏóêÏä§' ? 'bg-orange-100 text-orange-800' :
                                    'bg-gray-100 text-gray-800'
                                  }`}>
                                    {pricing.manufacturer}
                                  </span>
                                ) : '-'}
                              </td>
                              <td className="border border-gray-300 px-4 py-2 text-right font-mono">
                                {formatCurrency(pricing.dealer_cost_price)}
                              </td>
                              <td className="border border-gray-300 px-4 py-2 text-right font-mono">
                                {formatCurrency(pricing.dealer_selling_price)}
                              </td>
                              <td className="border border-gray-300 px-4 py-2 text-center">
                                <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                  {pricing.margin_rate.toFixed(2)}%
                                </span>
                              </td>
                              <td className="border border-gray-300 px-4 py-2 text-center">
                                {pricing.effective_from}
                              </td>
                              <td className="border border-gray-300 px-4 py-2 text-center">
                                {pricing.effective_to || '-'}
                              </td>
                              <td className="border border-gray-300 px-4 py-2 text-center">
                                <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                  pricing.is_active ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
                                }`}>
                                  {pricing.is_active ? 'ÌôúÏÑ±' : 'ÎπÑÌôúÏÑ±'}
                                </span>
                              </td>
                              <td className="border border-gray-300 px-4 py-2 text-center">
                                <div className="flex items-center justify-center gap-2">
                                  <button
                                    onClick={() => handleEdit(pricing, 'dealer')}
                                    className="p-1 text-blue-600 hover:text-blue-800 transition-colors"
                                    title="ÏàòÏ†ï"
                                  >
                                    <Edit className="w-4 h-4" />
                                  </button>
                                  <button
                                    onClick={() => openDeleteModal(pricing, 'dealer')}
                                    className="p-1 text-red-600 hover:text-red-800 transition-colors"
                                    title="ÏÇ≠Ï†ú"
                                  >
                                    <Trash2 className="w-4 h-4" />
                                  </button>
                                </div>
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  </div>
                )}
              </>
            )}
          </div>
        </div>

        {/* Ìé∏Ïßë Î™®Îã¨ */}
        <Modal
          isOpen={isEditModalOpen}
          onClose={() => setIsEditModalOpen(false)}
          title={`${editingItem ? 'ÏàòÏ†ï' : 'Ï∂îÍ∞Ä'} - ${
            editType === 'government' ? 'ÌôòÍ≤ΩÎ∂Ä Í≥†ÏãúÍ∞Ä' :
            editType === 'manufacturer' ? 'Ï†úÏ°∞ÏÇ¨Î≥Ñ ÏõêÍ∞Ä' :
            editType === 'installation' ? 'Í∏∞Î≥∏ ÏÑ§ÏπòÎπÑ' :
            editType === 'dealer' ? 'ÎåÄÎ¶¨Ï†ê Í∞ÄÍ≤©' :
            editType === 'sales' ? 'ÏòÅÏóÖÏ†ê ÏÑ§Ï†ï' : 'Ïã§ÏÇ¨ÎπÑÏö©'
          }`}
          size="md"
        >
          <EditForm
            item={editingItem}
            type={editType}
            onSave={handleSave}
            saving={saving}
          />
        </Modal>

        {/* ÏÇ≠Ï†ú ÌôïÏù∏ Î™®Îã¨ */}
        <ConfirmModal
          isOpen={isDeleteModalOpen}
          onClose={() => {
            setIsDeleteModalOpen(false);
            setDeleteItem(null);
          }}
          onConfirm={handleDelete}
          title="ÏÇ≠Ï†ú ÌôïÏù∏"
          message={`"${deleteItem?.equipment_name || deleteItem?.sales_office || deleteItem?.survey_name || ''}" Ìï≠Î™©ÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå? Ïù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§.`}
          variant="danger"
        />
      </div>
    </AdminLayout>
  );
}

// Ìé∏Ïßë Ìèº Ïª¥Ìè¨ÎÑåÌä∏
function EditForm({ item, type, onSave, saving }: {
  item: any;
  type: 'government' | 'sales' | 'survey' | 'manufacturer' | 'installation' | 'dealer';
  onSave: (data: any) => void;
  saving: boolean;
}) {
  const [formData, setFormData] = useState<any>({});

  useEffect(() => {
    if (item) {
      setFormData(item);
    } else {
      // ÏÉà Ìï≠Î™© Ï¥àÍ∏∞Í∞í ÏÑ§Ï†ï
      setFormData({
        effective_from: new Date().toISOString().split('T')[0]
      });
    }
  }, [item]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSave(formData);
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      {type === 'government' && (
        <>
          <div>
            <label className="block text-sm font-medium mb-1">Í∏∞Í∏∞Î™Ö</label>
            <input
              type="text"
              value={formData.equipment_name || ''}
              onChange={(e) => setFormData({...formData, equipment_name: e.target.value})}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">ÌôòÍ≤ΩÎ∂Ä Í≥†ÏãúÍ∞Ä</label>
            <input
              type="number"
              value={formData.official_price || ''}
              onChange={(e) => setFormData({...formData, official_price: Number(e.target.value)})}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Ï†úÏ°∞ÏÇ¨ ÏõêÍ∞Ä</label>
            <input
              type="number"
              value={formData.manufacturer_price || ''}
              onChange={(e) => setFormData({...formData, manufacturer_price: Number(e.target.value)})}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
        </>
      )}

      {type === 'sales' && (
        <>
          <div>
            <label className="block text-sm font-medium mb-1">ÏòÅÏóÖÏ†ê</label>
            <input
              type="text"
              value={formData.sales_office || ''}
              onChange={(e) => setFormData({...formData, sales_office: e.target.value})}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">ÏàòÏàòÎ£å Î∞©Ïãù</label>
            <select
              value={formData.commission_type || 'percentage'}
              onChange={(e) => setFormData({...formData, commission_type: e.target.value})}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="percentage">Îß§Ï∂ú ÎπÑÏú®</option>
              <option value="per_unit">Í∏∞Í∏∞Îãπ Îã®Í∞Ä</option>
            </select>
          </div>
          {formData.commission_type === 'percentage' ? (
            <div>
              <label className="block text-sm font-medium mb-1">ÏàòÏàòÎ£åÏú® (%)</label>
              <input
                type="number"
                step="0.1"
                value={formData.commission_percentage || ''}
                onChange={(e) => setFormData({...formData, commission_percentage: Number(e.target.value)})}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
          ) : (
            <div>
              <label className="block text-sm font-medium mb-1">Í∏∞Í∏∞Îãπ ÏàòÏàòÎ£å</label>
              <input
                type="number"
                value={formData.commission_per_unit || ''}
                onChange={(e) => setFormData({...formData, commission_per_unit: Number(e.target.value)})}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
          )}
        </>
      )}

      {type === 'manufacturer' && (
        <>
          <div>
            <label className="block text-sm font-medium mb-1">
              Í∏∞Í∏∞ Ï¢ÖÎ•ò (ÏΩîÎìú) {item?.id && <span className="text-xs text-gray-500">(ÏàòÏ†ï Î∂àÍ∞Ä)</span>}
            </label>
            <input
              type="text"
              value={formData.equipment_type || ''}
              onChange={(e) => setFormData({...formData, equipment_type: e.target.value})}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent disabled:bg-gray-100 disabled:cursor-not-allowed"
              placeholder="Ïòà: ph_meter"
              disabled={!!item?.id}
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Í∏∞Í∏∞Î™Ö</label>
            <input
              type="text"
              value={formData.equipment_name || ''}
              onChange={(e) => setFormData({...formData, equipment_name: e.target.value})}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Ïòà: PHÏÑºÏÑú"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Ï†úÏ°∞ÏÇ¨</label>
            <select
              value={formData.manufacturer || ''}
              onChange={(e) => setFormData({...formData, manufacturer: e.target.value})}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              required
            >
              <option value="">ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</option>
              <option value="ecosense">ÏóêÏΩîÏÑºÏä§</option>
              <option value="cleanearth">ÌÅ¨Î¶∞Ïñ¥Ïä§</option>
              <option value="gaia_cns">Í∞ÄÏù¥ÏïÑÏî®Ïï§ÏóêÏä§</option>
              <option value="evs">Ïù¥Î∏åÏù¥ÏóêÏä§</option>
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">ÏõêÍ∞Ä (‚Ç©)</label>
            <input
              type="number"
              value={formData.cost_price ?? ''}
              onChange={(e) => setFormData({...formData, cost_price: Number(e.target.value)})}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">ÏãúÌñâÏùº</label>
            <input
              type="date"
              value={formData.effective_from || ''}
              onChange={(e) => setFormData({...formData, effective_from: e.target.value})}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Ï¢ÖÎ£åÏùº (ÏÑ†ÌÉù)</label>
            <input
              type="date"
              value={formData.effective_to || ''}
              onChange={(e) => setFormData({...formData, effective_to: e.target.value})}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">ÎπÑÍ≥†</label>
            <textarea
              value={formData.notes || ''}
              onChange={(e) => setFormData({...formData, notes: e.target.value})}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              rows={2}
              placeholder="ÏõêÍ∞Ä Î≥ÄÍ≤Ω ÏÇ¨Ïú† Îì±"
            />
          </div>
        </>
      )}

      {type === 'installation' && (
        <>
          <div>
            <label className="block text-sm font-medium mb-1">
              Í∏∞Í∏∞ Ï¢ÖÎ•ò (ÏΩîÎìú) {item?.id && <span className="text-xs text-gray-500">(ÏàòÏ†ï Î∂àÍ∞Ä)</span>}
            </label>
            <input
              type="text"
              value={formData.equipment_type || ''}
              onChange={(e) => setFormData({...formData, equipment_type: e.target.value})}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent disabled:bg-gray-100 disabled:cursor-not-allowed"
              placeholder="Ïòà: ph_meter"
              disabled={!!item?.id}
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Í∏∞Í∏∞Î™Ö</label>
            <input
              type="text"
              value={formData.equipment_name || ''}
              onChange={(e) => setFormData({...formData, equipment_name: e.target.value})}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Ïòà: PHÏÑºÏÑú"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Í∏∞Î≥∏ ÏÑ§ÏπòÎπÑ (‚Ç©)</label>
            <input
              type="number"
              value={formData.base_installation_cost ?? ''}
              onChange={(e) => setFormData({...formData, base_installation_cost: Number(e.target.value)})}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">ÏãúÌñâÏùº</label>
            <input
              type="date"
              value={formData.effective_from || ''}
              onChange={(e) => setFormData({...formData, effective_from: e.target.value})}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Ï¢ÖÎ£åÏùº (ÏÑ†ÌÉù)</label>
            <input
              type="date"
              value={formData.effective_to || ''}
              onChange={(e) => setFormData({...formData, effective_to: e.target.value})}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">ÎπÑÍ≥†</label>
            <textarea
              value={formData.notes || ''}
              onChange={(e) => setFormData({...formData, notes: e.target.value})}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              rows={2}
              placeholder="ÏÑ§ÏπòÎπÑ Î≥ÄÍ≤Ω ÏÇ¨Ïú† Îì±"
            />
          </div>
        </>
      )}

      {type === 'dealer' && (
        <>
          <div>
            <label className="block text-sm font-medium mb-1">
              Í∏∞Í∏∞ Ï¢ÖÎ•ò (ÏΩîÎìú) {item?.id && <span className="text-xs text-gray-500">(ÏàòÏ†ï Î∂àÍ∞Ä)</span>}
            </label>
            <input
              type="text"
              value={formData.equipment_type || ''}
              onChange={(e) => setFormData({...formData, equipment_type: e.target.value})}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent disabled:bg-gray-100 disabled:cursor-not-allowed"
              placeholder="Ïòà: sensor"
              disabled={!!item?.id}
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Í∏∞Í∏∞Î™Ö</label>
            <input
              type="text"
              value={formData.equipment_name || ''}
              onChange={(e) => setFormData({...formData, equipment_name: e.target.value})}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Ïòà: PHÏÑºÏÑú"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Í≥µÍ∏âÍ∞Ä (ÏõêÍ∞Ä) (‚Ç©)</label>
            <input
              type="number"
              value={formData.dealer_cost_price ?? ''}
              onChange={(e) => setFormData({...formData, dealer_cost_price: Number(e.target.value)})}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">ÌåêÎß§Í∞Ä (‚Ç©)</label>
            <input
              type="number"
              value={formData.dealer_selling_price ?? ''}
              onChange={(e) => setFormData({...formData, dealer_selling_price: Number(e.target.value)})}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Ï†úÏ°∞ÏÇ¨ (ÏÑ†ÌÉù)</label>
            <select
              value={formData.manufacturer || ''}
              onChange={(e) => setFormData({...formData, manufacturer: e.target.value})}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="">ÏÑ†ÌÉù ÏïàÌï®</option>
              <option value="ÏóêÏΩîÏÑºÏä§">ÏóêÏΩîÏÑºÏä§</option>
              <option value="ÌÅ¨Î¶∞Ïñ¥Ïä§">ÌÅ¨Î¶∞Ïñ¥Ïä§</option>
              <option value="Í∞ÄÏù¥ÏïÑÏî®Ïï§ÏóêÏä§">Í∞ÄÏù¥ÏïÑÏî®Ïï§ÏóêÏä§</option>
              <option value="Ïù¥Î∏åÏù¥ÏóêÏä§">Ïù¥Î∏åÏù¥ÏóêÏä§</option>
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">ÏãúÌñâÏùº</label>
            <input
              type="date"
              value={formData.effective_from || ''}
              onChange={(e) => setFormData({...formData, effective_from: e.target.value})}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Ï¢ÖÎ£åÏùº (ÏÑ†ÌÉù)</label>
            <input
              type="date"
              value={formData.effective_to || ''}
              onChange={(e) => setFormData({...formData, effective_to: e.target.value})}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">ÎπÑÍ≥†</label>
            <textarea
              value={formData.notes || ''}
              onChange={(e) => setFormData({...formData, notes: e.target.value})}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              rows={2}
              placeholder="ÎåÄÎ¶¨Ï†ê Í∞ÄÍ≤© Î≥ÄÍ≤Ω ÏÇ¨Ïú† Îì±"
            />
          </div>
        </>
      )}

      {type === 'survey' && (
        <>
          <div>
            <label className="block text-sm font-medium mb-1">Ïã§ÏÇ¨ Ïú†Ìòï</label>
            <select
              value={formData.survey_type || ''}
              onChange={(e) => setFormData({...formData, survey_type: e.target.value})}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              required
              disabled={!!item?.id}
            >
              <option value="">ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</option>
              <option value="estimate">Í≤¨Ï†ÅÏã§ÏÇ¨</option>
              <option value="pre_construction">Ï∞©Í≥µÏ†ÑÏã§ÏÇ¨</option>
              <option value="completion">Ï§ÄÍ≥µÏã§ÏÇ¨</option>
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Ïã§ÏÇ¨Î™Ö</label>
            <input
              type="text"
              value={formData.survey_name || ''}
              onChange={(e) => setFormData({...formData, survey_name: e.target.value})}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Ïòà: Í≤¨Ï†ÅÏã§ÏÇ¨"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Í∏∞Î≥∏ ÎπÑÏö© (‚Ç©)</label>
            <input
              type="number"
              value={formData.base_cost ?? ''}
              onChange={(e) => setFormData({...formData, base_cost: Number(e.target.value)})}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">ÏãúÌñâÏùº</label>
            <input
              type="date"
              value={formData.effective_from || ''}
              onChange={(e) => setFormData({...formData, effective_from: e.target.value})}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Ï¢ÖÎ£åÏùº (ÏÑ†ÌÉù)</label>
            <input
              type="date"
              value={formData.effective_to || ''}
              onChange={(e) => setFormData({...formData, effective_to: e.target.value})}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
        </>
      )}

      {/* ÏãúÌñâÏùº Í≥µÌÜµ ÌïÑÎìú (survey ÌÉÄÏûÖÏù¥ ÏïÑÎãê ÎïåÎßå ÌëúÏãú) */}
      {type !== 'survey' && type !== 'manufacturer' && type !== 'installation' && type !== 'dealer' && (
        <div>
          <label className="block text-sm font-medium mb-1">ÏãúÌñâÏùº</label>
          <input
            type="date"
            value={formData.effective_from || ''}
            onChange={(e) => setFormData({...formData, effective_from: e.target.value})}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            required
          />
        </div>
      )}

      <div className="flex justify-end gap-2 pt-4">
        <button
          type="button"
          onClick={() => window.history.back()}
          className="px-4 py-2 text-gray-700 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
        >
          Ï∑®ÏÜå
        </button>
        <button
          type="submit"
          disabled={saving}
          className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2 transition-colors"
        >
          {saving ? (
            <>
              <Loader2 className="w-4 h-4 animate-spin" />
              Ï†ÄÏû• Ï§ë...
            </>
          ) : (
            <>
              <Save className="w-4 h-4" />
              Ï†ÄÏû•
            </>
          )}
        </button>
      </div>
    </form>
  );
}

// withAuth HOCÎ°ú Í∂åÌïú Ï≤¥ÌÅ¨ (Í∂åÌïú 3 Ïù¥ÏÉÅ ÌïÑÏöî)
export default withAuth(PricingManagement, undefined, 3);